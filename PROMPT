**Overall Goal:**

"Design and develop a web application on AWS to manage the creation, review, and distribution of exam question papers. The system will involve paper setters, paper getters (exam cells), administrators, and a superuser, each with specific roles and functionalities. The application must handle user authentication, profile management, question paper workflows, and communication via organizational email."

**I. General Website Features:**

* **Logo:** The website should prominently display a logo.
* **Mission Statement:** Include a section outlining the organization's mission.
* **Subject Experts List:** Display a list of subject experts with their details (fetched from the database).
* **User Roles:** The system will support three user roles:
    * Paper Setter
    * Paper Getter
    * Admin
* **Super User:**
    * A separate login for a superuser will provide access to comprehensive data and system management features.

**II. User Authentication and Management:**

* **Login/Signup:** Implement secure login and signup functionality for all user roles.
* **Organizational Email:**
    * During signup, users (paper setters and paper getters) must provide their personal/exam cell email.
    * The system will require the creation of an organizational email address in the format: `userid@organization-domain-name.com`. The `userid` is provided by the user.
    * Implement a mechanism to handle domain name validation and error handling.
* **One-Time Password (OTP):**
    * Send an OTP to the user's personal/exam cell email during signup and password reset.
    * Require users to reset their password after the initial login.
* **Personal Information:**
    * After signup/login, users (paper setters) must fill out a personal information form.
    * Details to collect:
        * Name of organization
        * Branch
        * Subjects of expertise
        * Proficiency level in subject
        * Years of experience
* **Profile Verification:**
    * Admin users will verify user details.
    * Implement a mechanism for admins to mark a user's profile as "verified" (e.g., a checkbox).
    * Generate a unique ID for each verified user.
* **Paper Getter Verification:**
    * Paper getters can only log in if their account has been verified by an admin. Display an error message like "Sorry, we can't authorize you" if they attempt to log in before verification.

**III. Paper Setter Functionality:**

* **Menu Tab:**
    * Include a menu tab with sections for:
        * Personal Information (as described above)
        * History (of uploaded papers, etc.)
        * Updates (notifications, e.g., paper upload requests with deadlines)
* **"Your All Set" Message:**
    * Display a "Your all set" message after the personal information form is submitted.
* **Admin Notification:**
    * In the backend, trigger an email to admins notifying them to verify the paper setter's details.
* **Question Paper Upload:**
    * When required, provide a link for paper setters to upload question papers.
    * Implement a deadline for uploads.
    * Include a timer on the upload page to show the remaining time.
    * Accept question papers in PDF format.

**IV. Paper Getter Functionality:**

* **Details Request (After Verification):**
    * After login (and verification), prompt the paper getter to enter details:
        * Course
        * Branch
        * Subject
        * Upload syllabus
        * Paper difficulty level
        * Number of sets required
        * Upload model paper
        * Exam date and time
* **Faculty Selection:**
    * Based on the difficulty level, display a list of available paper setters (using their unique IDs):
        * Hard: Professors from IIT/NIT
        * Medium: Central or State University faculty
        * Low: Faculty from autonomous or affiliated colleges
    * Order the list by the paper setters' ratings (highest to lowest).
    * Ensure that the list excludes paper setters from the same organization as the paper getter.
    * Allow the paper getter to select only one paper setter.
* **Confirmation Message:**
    * After selection, display a "Your all set, question paper will be available on time" message.
* **Paper Setter Notification:**
    * Trigger an email to the selected paper setter with:
        * Paper getter ID
        * Syllabus
        * Model paper
        * End date for paper submission (3 days before the exam date)
        * A link to the login page.
* **"Question Paper" Menu:**
    * After receiving the notification, the paper setter will see a new menu item called "Question Paper," which contains the upload link.
* **Question Paper Storage:**
    * Store uploaded question papers with a unique identifier in PDF format.
* **Expert Notification:**
    * After the paper is uploaded, send an email to subject experts with:
        * The question paper
        * The syllabus
        * A link to a Google Form for question paper review.
* **Expert Review:**
    * The Google Form should be a default template for evaluating question paper standards.
    * Ensure that experts can only submit the form once.
* **Admin Notification (After Expert Review):**
    * After experts submit the form, send an email to admins with:
        * The question paper
        * The Google Form responses
        * The exam date.
* **Paper Distribution:**
    * If the paper rating is above 70% (determined by admins):
        * Send an email to paper getters 1 hour before the exam with a download link and password.
        * Prompt paper getters for feedback after download.
    * If the paper rating is below or equal to 70%:
        * Send an email to the paper setter with feedback from the admins.
        * Re-activate the upload link for the paper setter.
        * Set a new deadline for re-upload (6 hours before the exam).

**V. Admin Functionality:**

* **Signup:**
    * Require a specific username (e.g., `katy@perry@gmail.com`) for admin signup.
    * Require a separate organizational email address.
    * Implement OTP and password reset.
* **Dashboard:**
    * Provide a dashboard to view lists of:
        * Paper setters and their details
        * Paper getters and their details
* **User Management:**
    * Allow admins to manually change user status (verified/unverified).
    * Enable admins to assign ratings to paper setters based on experience level.
* **Paper Setter Ratings and Feedback:**
    * Allow admins to rate paper setters (on a scale of 100) based on paper quality.
    * Enable admins to provide feedback if the rating is below 75%.
    * Trigger an email to the paper setter with the feedback.
* **Question Paper Approval:**
    * Admins should be able to view expert reviews and approve or reject papers.

**VI. Super User Functionality:**

* **Menu:** The superuser dashboard should have a menu with access to:
    * **Subject Expert List:** View all subject experts and their details (fetched from the database).
    * **S3 Access:** Access to AWS S3 services for managing stored question papers (PDFs with unique IDs).
    * **Paper Setter List:** View all paper setters and their details.
    * **Paper Getter List:** View all paper getters and their details.
    * **Admins List:** View all admin users and their details.

**VII. Technical Requirements (AWS Focus):**

* **Hosting:** Host the application on AWS.
* **Database:** Use a suitable AWS database service (e.g., RDS) for storing user data, paper details, etc.
* **Storage:** Use AWS S3 for storing question papers.
* **Email:** Integrate with AWS SES (Simple Email Service) for sending emails.
* **Security:** Implement robust security measures, including user authentication, authorization, and data encryption.
* **Scalability:** Design the application to be scalable to handle increasing user loads.
* **Reliability:** Ensure high availability and fault tolerance.

**VIII. Specific Notes:**

* **Email:** Clarify that "email" refers to the organizational email (e.g., `xyz@organization.com`).
* **Paper Getter Login:** Enforce the rule that paper getters can only log in after admin verification.
* **Faculty List Exclusion:** Implement logic to exclude paper setters from the same organization as the paper getter when displaying the faculty list.

**Prompt Refinements and Considerations:**

* **UI/UX:** You'll likely need separate prompts or specifications for the user interface (UI) and user experience (UX) design (e.g., wireframes, mockups, style guides).
* **Error Handling:** Add details about error handling and user feedback mechanisms (e.g., validation messages, success messages).
* **Reporting:** Consider if you need any reporting features (e.g., reports on paper submissions, user activity).
* **Testing:** Include requirements for unit testing, integration testing, and user acceptance testing.
* **Deployment:** Specify the deployment process on AWS.
* **Maintenance:** Outline any maintenance requirements.
